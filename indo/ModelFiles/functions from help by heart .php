<?php
require '../../hbh_config.php';
//include ('way2sms-api.php');

function confirm_login($usern, $passw){
	global $dbh;
	$q = 'SELECT * FROM users WHERE username=:username AND password=:password';
	$query = $dbh->prepare($q);
	$query->execute(array(':username' => $usern, ':password' => $passw));
	if ($query->rowCount() == 1) {
		return $row = $query->fetch(PDO::FETCH_ASSOC);
	}else{
		return false;
	}
}

function count_keys(){
	global $dbh;
	$key = 0;
	$q = 'SELECT * FROM keyss WHERE status=:key';
	$query = $dbh->prepare($q);
	$query->execute(array(':key' => $key));
	return $query->rowCount();
}

function count_user_keys($username){
	global $dbh;
	$key = 0;
	$q = 'SELECT * FROM keyss WHERE created_by = :username AND status=:key';
	$query = $dbh->prepare($q);
	$query->execute(array(':username'=>$username ,':key' => $key));
	return $query->rowCount();
}

function count_masters(){
	global $dbh;
	$q = 'SELECT * FROM users WHERE role = "master" OR role = "admin"';
	$query = $dbh->query($q);
	return $query->rowCount();
}

function count_members(){ /// total members in help by heart except master and admin
	global $dbh;
	$q = 'SELECT * FROM users WHERE role = "user"';
	$query = $dbh->query($q);
	return $query->rowCount();
}

function count_user_members($username){ // total members direct below the particular members
	global $dbh;
	$q = "SELECT * FROM users WHERE sponsor = :sponsor";
	$query = $dbh->prepare($q);
	$query->execute(array(':sponsor'=>$username));
	return $query->rowCount();
}

function count_user_chain($username){ // total members chain below the particular members
	global $dbh;
	$chain = array();

	$members = array($username.' - A');
	$sideA = 0;
	while ($members) {
		$placement_under = array_shift($members);
		$q = "SELECT username, name, sponsor, placement_under FROM users WHERE placement_under = :placement_under";
		$query = $dbh->prepare($q);
		$query->execute(array(':placement_under'=>$placement_under));
		if($row = $query->fetch(PDO::FETCH_ASSOC)) {
			$chain[$row['username']] = array(
			    'username' => $row['username'],
			    'sponsor' => $row['sponsor'],
			    'name' => $row['name'],
			    'placement_under' => $row['placement_under']
			  );
			$members[] =  $row['username'].' - A';
			$members[] =  $row['username'].' - B';
			$sideA++;
		}
	}

	$members = array($username.' - B');
	$sideB = 0;
	while ($members) {
		$placement_under = array_shift($members);
		$q = "SELECT username, name, sponsor, placement_under FROM users WHERE placement_under = :placement_under";
		$query = $dbh->prepare($q);
		$query->execute(array(':placement_under'=>$placement_under));
		if($row = $query->fetch(PDO::FETCH_ASSOC)) {
			$chain[$row['username']] = array(
			    'username' => $row['username'],
			    'sponsor' => $row['sponsor'],
			    'name' => $row['name'],
			    'placement_under' => $row['placement_under']
			  );
			$members[] =  $row['username'].' - A';
			$members[] =  $row['username'].' - B';
			$sideB++;
		}
	}
	$_SESSION['side_A_chain_count'] = $sideA;
	$_SESSION['side_B_chain_count'] = $sideB;
	return $chain;
}


function print_user_chain_list($username){ // total members chain below the particular members
	global $dbh;
	$members = array($username.' - A', $username.' - B');
	$chain = array();
	$count = 1;
	while ($members) {
		$placement_under = array_shift($members);
		$q = "SELECT * FROM users WHERE placement_under = :placement_under ORDER BY timestamp DESC";
		$query = $dbh->prepare($q);
		$query->execute(array(':placement_under'=>$placement_under));
		if($row = $query->fetch(PDO::FETCH_ASSOC)){
			if(!isset($chain[$row['timestamp']])) $chain[$row['timestamp']] = $row;
			$members[] =  $row['username'].' - A';
			$members[] =  $row['username'].' - B';
		}
	}
	krsort($chain);
		foreach ($chain as $key => $row) {
			echo
			'<tr '.(($row['sponsor'] == $username) ? 'class="active"' : '').'>
                <td>'.$count.'</td>
                <td>'.$row['username'].'</td>
                <td>'.$row['name'].'</td>
                <td>'.$row['sponsor'].'</td>
                <td>'.$row['userlevel'].'</td>
                <td>'.$row['placement_under'].'</td>
                <td>'.$row['contact'].'</td>
                <td>'.$row['joining_time'].'</td>
            </tr>';
            $count++;
	}
	return $count;
}

function count_amount(){ // amount will be received only for the keys generated by admin
	global $dbh;
	$q = 'SELECT * FROM keyss WHERE creator_role = "admin" AND status = 1';
	$query = $dbh->query($q);
	return ($query->rowCount())*200;
}

function verify_key($keyss){
	global $dbh;
	$q = 'SELECT * FROM keyss WHERE keyss=:keyss';
	$query = $dbh->prepare($q);
	$query->execute(array(':keyss' => $keyss));
	$row = $query->fetch(PDO::FETCH_ASSOC);
	if(($query->rowCount() == 1) && ($row['keyss'] == $keyss) && ($row['status'] == 0)){
		return $row['keyss'];
	}else{
		return false;
	}
}

function verify_available_username($uname){
	global $dbh;
	$q = 'SELECT * FROM users WHERE username=:uname';
	$query = $dbh->prepare($q);
	$query->execute(array(':uname' => $uname));
	if($query->rowCount() == 0){
		return $uname ;
	}else{
		return false;
	}
}

function verify_sponsor($sponsor){
	global $dbh;
	$q = 'SELECT * FROM users WHERE username=:sponsor';
	$query = $dbh->prepare($q);
	$query->execute(array(':sponsor' => $sponsor));

	if($query->rowCount() == 1){
		$row = $query->fetch(PDO::FETCH_ASSOC);
		return $row ;
	}else{
		return false;
	}
}

function store_contact_query($details){
	global $dbh;
		$q = "INSERT INTO store_contact_query (name, mobile, email, message) VALUES (:name, :mobile, :email, :message)";
		$query = $dbh->prepare($q);
		$status = $query->execute(array(':name'=>$details['name'], ':mobile'=>$details['mobile'], ':email'=>$details['email'], ':message'=>$details['message']));
		if($status) {return true;}
		else{return false;}
}

function count_unreed_contact_queries(){
	global $dbh;
	$status = 0;
	$q = 'SELECT * FROM store_contact_query WHERE status = :status';
	$query = $dbh->prepare($q);
	$query->execute(array(':status'=>$status));
	return $query->rowCount();
}

function register_user($details, $placement_under){
	global $dbh;
	$role = 'user';
	$name = $details['title'].' '.$details['fname'].' '.$details['lname'];
	$joining = date('d/m/Y');
	$address = $details['address'].', '.$details['city'].', '.$details['state'].' - '.$details['pin'];
	$sponsor = isset($_SESSION['sponsor_id']) ? $_SESSION['sponsor_id'] : $_SESSION['sess_username'];
	$accountType = 'Savings';
	$q = 'INSERT INTO users (email, username, password, role, name, sponsor, placement_under, joining_time, contact, address) values (:email, :username, :password, :role, :name, :sponsor, :placement_under, :joining_time, :contact, :address)';
	$query = $dbh->prepare($q);
	$status = $query->execute(array(':email'=>$details['email'], ':username'=>$_SESSION['username_id'], ':password'=>$details['password'], ':role'=>$role, ':name'=>$name, ':sponsor'=>$sponsor, ':placement_under'=>$placement_under, ':joining_time'=>$joining, ':contact'=>$details['mobile'], ':address'=>$address));
	if ($status) {
		$q2 = 'INSERT INTO users_more (username, father_name, keyss, pan, bank_name, bank_ifsc, bank_account, bank_type, nominee, nominee_contact) values (:username, :father_name, :keyss , :pan, :bank_name, :bank_ifsc, :bank_account, :bank_type, :nominee, :nominee_contact)';
		$query2 = $dbh->prepare($q2);
		$status2 = $query2->execute(array(':username'=>$_SESSION['username_id'], ':father_name'=>$details['father'], ':keyss'=>$_SESSION['sess_key_value'], ':pan'=>$details['pan'], ':bank_name'=>$details['bname'], ':bank_ifsc'=>$details['ifsc'], ':bank_account'=>$details['account'], ':bank_type'=>$accountType, ':nominee'=>$details['nname'], ':nominee_contact'=>$details['ncontact']));
		if ($status2) {
			return $_SESSION['username_id'];
		}else{
			$dbh->query("DELETE FROM users WHERE username = '".$_SESSION['username_id']."' LIMIT 1;");
			echo $query2->errorInfo()[2];
			return false;
		}
	}else{
		echo $status->errorInfo()[2];
		return false;
	}
}

function keyss_make_used($keyss, $used_by, $used_to){
	global $dbh;
	$date = date('d/m/Y');
	$status = 1;
	$q = 'UPDATE keyss SET used_by = :used_by, used_to = :used_to, used_date = :used_date, status = :status WHERE keyss = :keyss';
	$query = $dbh->prepare($q);
	$result = $query->execute(array(':used_by'=>$used_by, ':used_to'=>$used_to, ':used_date'=>$date, ':status'=>$status, ':keyss'=>$keyss));
	if ($result) {
		return true;
	}else{
		return false;
	}
}

function generate_keyss($howMany){
	global $dbh;
	$chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
	$keyss = '';
	$count = 1;
	while ($count <= $howMany){
		$keyss = '';
		for ($i=0; $i < 10; $i++) {
			$keyss .= $chars[rand(0,strlen($chars)-1)];
		}
		$q = "INSERT INTO keyss (keyss, created_by, creator_role) VALUES (:keyss, :created_by, :creator_role)";
		$query = $dbh->prepare($q);
		$status = $query->execute(array(':keyss'=>$keyss, ':created_by'=>$_SESSION['sess_username'], ':creator_role'=>$_SESSION['sess_userrole']));
		if($status) $count++;
	}
	if ($status) {
		return true;
	}else{
		return false;
	}
}

function list_available_keys($username, $start){
	global $dbh;
	$status = 0;
	$count = $start+1;
	$q = "SELECT * FROM keyss WHERE created_by=:username AND status = :status ORDER BY creation_timestamp DESC LIMIT ".$start.", 20";
	$query = $dbh->prepare($q);
	$query->execute(array(':username' => $username, ':status'=>$status));
	if($query->rowCount()){

		while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
			echo
			'<tr title="Click status to use this key for registration">
                <td>'.$count.'</td>
                <td>'.$row['keyss'].'</td>
                <td>'.$row['creation_timestamp'].'</td>
                <td>'.$row['created_by'].'</td>
                <td><a href="../profile/?newRegistration&key='.$row['keyss'].'"><span class="label label-sm label-success">Unused</span></a></td>
            </tr>';
            $count++;
		}
		return $count;
	}else{
		echo '
		<tr>
	        <td clospan="4">No More Keys available</td>
	    </tr>';
	    return $count;
	}
}

function transfer_keys($from, $to, $keyss){
	global $dbh;
	$status = 0;
	$q = 'SELECT * FROM keyss WHERE created_by=:id AND status = :status';
	$query = $dbh->prepare($q);
	$query->execute(array(':id' => $from, ':status'=>$status));
	$newrole = 'user';
	if($query->rowCount() >= $keyss) {
		while (($result = $query->fetch(PDO::FETCH_ASSOC)) && $keyss) {
			$transitions = $result['transitions'].'-'.$from.'('.date('d/m/Y').')';
			$q1 = 'UPDATE keyss SET created_by = :newowner, creator_role = :newrole, transitions = :transitions WHERE keyss = :keyss';
			$query1 = $dbh->prepare($q1);
			$query1->execute(array(':newowner' => $to, ':newrole'=>$newrole, ':transitions'=> $transitions, ':keyss'=> $result['keyss']));
			$keyss--;
		}
		return true;
	}else{
		return false;
	}
}

function fetch_user_details($username){
	global $dbh;
	$q = 'SELECT * FROM users WHERE username = :username';
	$query = $dbh->prepare($q);
	$query->execute(array(':username' => $username));

	$q1 = 'SELECT * FROM users_more WHERE username = :usernamee';
	$query1 = $dbh->prepare($q1);
	$query1->execute(array(':usernamee' => $username));
	if ($query->rowCount() == 1) {
		$row = $query->fetch(PDO::FETCH_ASSOC);
		$row1 = $query1->fetch(PDO::FETCH_ASSOC);
		return array_merge_recursive($row, $row1);
	}else{
		echo "<code>Something Wrong happened, Please call Administrator</code>";
	}
}

function change_password($user, $old, $new){
	global $dbh;
	$q = "UPDATE users SET password = :password WHERE username = :user AND password = :oldpassword";
	$result = $dbh->prepare($q);
	$result->execute(array(':password'=>$new, ':user'=>$user, ':oldpassword'=>$old));
	if ($result->rowCount() == 1) {
		return $result->errorInfo();
	}else{
		return false;
	}
}

function update_profile($username, $details){
	global $dbh;
	$q = "UPDATE users SET contact = :contact, email = :email, address = :address WHERE username = :user";
	$result = $dbh->prepare($q);
	$result->execute(array(':contact'=>$details['mobile'], ':email'=>$details['email'], ':address'=>$details['address'], ':user'=>$username));

	$q1 = 'UPDATE users_more SET father_name = :father_name, bank_name = :bank, bank_type = :type, bank_account = :account, pan = :pan, bank_ifsc = :ifsc, nominee = :nominee, nominee_contact = :contact WHERE username = :user';
	$result1 = $dbh->prepare($q1);
	$result1->execute(array(':father_name'=>$details['father'], ':bank'=>$details['bname'], ':ifsc'=>$details['ifsc'], ':account'=>$details['account'], ':type'=>$details['accountType'], ':pan'=>$details['pan'], ':nominee'=>$details['nname'], ':contact'=>$details['ncontact']  ,':user'=>$username));

	if (($result->rowCount() == 1) && ($result1->rowCount() == 1)) {
		return $result->errorInfo();
	}else{
		return $result->errorInfo();
	}
}

function transaction($username, $transaction, $details){
	global $dbh;
	$amount = (int)substr($transaction, 1);
	if ($details[0] == "D") {
		$amount = - $amount;
	}
	$q = "INSERT INTO payment (username, amount, details) VALUES (:username, :amount, :details)";
	$query = $dbh->prepare($q);
	$status = $query->execute(array(':username'=>$username, ':amount'=>$amount, ':details'=>$details));
	if ($status) {
		$q2 = "UPDATE users_more SET wallet_amount = wallet_amount $transaction WHERE username = :username";
		$query2 = $dbh->prepare($q2);
		$status2 = $query2->execute(array(':username'=>$username));
		if ($status2) {
			return true;
		}
	}
	return false;
}

function check_amount($username){
	global $dbh;
	$q = "SELECT wallet_amount FROM users_more WHERE username = '".$username."'";
	$query = $dbh->query($q);
	$row = $query->fetch(PDO::FETCH_ASSOC);
	if ($row) {
			return $row['wallet_amount'];
	}else{
		return false;
	}
}

function check_level($username){
	global $dbh;
	$q = "SELECT userlevel FROM users WHERE username = :username";
	$query = $dbh->prepare($q);
	$query->execute(array(':username'=>$username));
	$row = $query->fetch(PDO::FETCH_ASSOC);
	if ($row) {
			return $row['userlevel'];
	}else{
		return false;
	}
}

function transfer_amount($from, $to, $amount){
	global $dbh;
	$damount = $amount + $amount*0.02;
	$details = "Credit - Transfered by $from";
	$q = "INSERT INTO payment (username, amount, details) VALUES (:username, :amount, :details)";
	$query = $dbh->prepare($q);
	$status = $query->execute(array(':username'=>$to, ':amount'=>$amount, ':details'=>$details));

	if ($status) {
		$entry = - $damount;
		$details = "Debit - Transfered to $to";
		$status = $query->execute(array(':username'=>$from, ':amount'=>$entry, ':details'=>$details));

		$q2 = "UPDATE users_more SET wallet_amount = wallet_amount - $damount WHERE username = '".$from."';";
		$q2 .= "UPDATE users_more SET wallet_amount = wallet_amount + $amount WHERE username = '".$to."'";
		$query = $dbh->query($q2);
		if ($query) {
			return true;
		}
	}
	return false;
}

function list_transactions($username, $page){
	global $dbh;
	$count = $page+1;
	$q = 'SELECT * FROM payment WHERE username = :username ORDER BY timestamp DESC LIMIT '.$page.', 20';
	$query = $dbh->prepare($q);
	$query->execute(array(':username' => $username));
	if($query->rowCount()){

		while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
			$type = ($row['details'][0] == 'C') ? '<span class="label label-sm label-success">C</span>' : '<span class="label label-sm label-danger">D</span>';
			echo
			'<tr>
                <td>'.$count.'</td>
                <td><b>'.$row['amount'].'</b></td>
                <td>'.$row['details'].'</td>
                <td>'.date_format(date_create($row['timestamp']), 'd/m/y h:i A').'</td>
                <td>'.$type.'</td>
            </tr>';
            $count++;
		}
		return $count;
	}else{
		echo '
		<tr>
	        <td clospan="5">No More transactions available</td>
	    </tr>';
	    return $count;
	}
}

function show_message($username, $start){//start will be used for numbering and also for desc. between Unseen & All.
	global $dbh;
	$messages = array('messages'=>array(), 'time'=>array());
	if ($start === 'unseen') {
		$status = 0;
		$q = 'SELECT * FROM messages WHERE username = :username AND status = :status ORDER BY timestamp ASC';

	}else{
		$status = 1;
		$q = 'SELECT * FROM messages WHERE username = :username AND status = :status  ORDER BY timestamp ASC LIMIT '.$start.", 20";
	}

	$query = $dbh->prepare($q);
	$query->execute(array(':username'=>$username, ':status'=>$status));
	while ($result = $query->fetch(PDO::FETCH_ASSOC)) {
		$messages['messages'][] = $result['message'];
		$messages['time'][] = $result['timestamp'];
	}
	if ($messages['messages']) {
		return $messages;
	}else{
		return false;
	}
}

function make_message_read($username){
	global $dbh;

	$q = "UPDATE messages SET status = 1 WHERE username = :username";
	$query = $dbh->prepare($q);
	$query->execute(array(':username'=>$username));
	if ($query) {
		return true;
	}else{
		return false;
	}
}

function placement_under($sponsor){
	global $dbh;
	$placementArray = array();

	$sideA  = 0;
	$members = array($sponsor.' - A');
	while ($members) {
		$placement_under = array_shift($members);
		$q = "SELECT name, username FROM users WHERE placement_under = :placement_under ORDER BY timestamp ASC;";
		$query = $dbh->prepare($q);
		$query->execute(array(':placement_under'=>$placement_under));
		if ($row = $query->fetch(PDO::FETCH_ASSOC)) {
        	$members[] = $row['username'].' - A';
        	$members[] = $row['username'].' - B';
        	$sideA++;
		}else{
			$placementArray[] = $placement_under;
		}
	}

	$sideB = 0;
	$members = array($sponsor.' - B');
	while ($members) {
		$placement_under = array_shift($members);
		$q = "SELECT name, username FROM users WHERE placement_under = :placement_under ORDER BY timestamp ASC;";
		$query = $dbh->prepare($q);
		$query->execute(array(':placement_under'=>$placement_under));
		if ($row = $query->fetch(PDO::FETCH_ASSOC)) {
        	$members[] = $row['username'].' - A';
        	$members[] = $row['username'].' - B';
        	$sideB++;
		}else{
			$placementArray[] = $placement_under;
		}
	}
	$_SESSION['side_A_chain_count'] = $sideA;
	$_SESSION['side_B_chain_count'] = $sideB;
	return $placementArray;
}

function check_placement($sponsor, $placement_under){
	global $dbh;
	$members = array($sponsor.' - A', $sponsor.' - B');
	$placementArray = array();
	while ($members) {
		$sponsor = array_shift($members);
		$q = "SELECT name, username FROM users WHERE placement_under = :placement_under ORDER BY timestamp ASC;";
		$query = $dbh->prepare($q);
		$query->execute(array(':placement_under'=>$sponsor));
		if ($row = $query->fetch(PDO::FETCH_ASSOC)) {
        	$members[] = $row['username'].' - A';
        	$members[] = $row['username'].' - B';
		}else{
			return true;
		}
	}
	return false;
}

function get_seniors($username){
	global $dbh;
	$senior = array($username);
	while (true) {
		$q = "SELECT sponsor FROM users WHERE username = :username";
		$query = $dbh->prepare($q);
		$query->execute(array(':username'=>$username));
		$row = $query->fetch(PDO::FETCH_ASSOC);
		$username = $row['sponsor'];
		if (strlen($username) > 2) {
			$senior[] = $username;
		}else{
			return $senior;
		}
	}
}

function get_placement_heads($username){ #################### only 3 because commission will only be paid upto 3 levels
	global $dbh;
	$placement_heads = array($username);
	for ($i=0; $i < 2; $i++) {
		$q = "SELECT placement_under FROM users WHERE username = :username";
		$query = $dbh->prepare($q);
		$query->execute(array(':username'=>$username));
		$row = $query->fetch(PDO::FETCH_ASSOC);
		$username = explode(' - ', $row['placement_under'])[0];
		if (strlen($username) > 1) {
			$placement_heads[] = $row['placement_under'];
		}else{
			return $placement_heads;
		}
	}
}

function level_up($username){
	global $dbh;
	$q = "UPDATE users SET userlevel = userlevel + 1 WHERE username = :username";
	$query = $dbh->prepare($q);
	$query->execute(array(':username'=>$username));
	if ($query) {
		return true;
	}else{
		return false;
	}
}

function check_user_status($username){
	global $dbh;
	$q = "SELECT status FROM users_more WHERE username = :username";
	$query = $dbh->prepare($q);
	$query->execute(array(':username'=>$username));
	$row = $query->fetch(PDO::FETCH_ASSOC);
	if ($row) {
			return $row['status'];
	}else{
		return false;
	}
}

function bar_user($username, $status){ # status => 0 = Ban / 3 = Level3 / 5 = level5 / 7 = level7 / 9 = level9
	global $dbh;
	$q = "UPDATE users_more SET status = :status WHERE username = :username";
	$query = $dbh->prepare($q);
	$query->execute(array(':status'=>$status ,':username'=>$username));
	if ($query) {
		return true;
	}else{
		return false;
	}
}

function make_user_active($username){
	global $dbh;
	$q = "UPDATE users_more SET status = 1 WHERE username = :username";
	$query = $dbh->prepare($q);
	$query->execute(array(':username'=>$username));
	if ($query) {
		return true;
	}else{
		return false;
	}
}

function check_last_entry($username, $table, $column, $orderBY){ // last entries of particular column of any user in required table
	global $dbh;
	$q = "SELECT ".$column." FROM ".$table." WHERE username = :username ORDER BY ".$orderBY." DESC";
	$query = $dbh->prepare($q);
	$query->execute(array(':username'=>$username));
	if ($row = $query->fetch(PDO::FETCH_ASSOC)) {
			return $row[$column];
	}
}

function list_all_reports($username, $start){
	global $dbh;
	$q = 'SELECT * FROM user_reports ORDER BY status DESC LIMIT '.$start.', 50' ;
	$query = $dbh->query($q);
	$count = 1;
	while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
		echo '
			<tr '.(($row['status'] == 0) ? 'class="success"' : '').'>
                <td>'.$count.'</td>
                <td>'.$row['username'].'</td>
                <td>'.$row['name'].'</td>
                <td>'.$row['contact'].'</td>
                <td>'.$row['report'].'</td>
                <td>'.$row['timestamp'].'</td>
                <td>'.(($row['status'] == 0) ? '<a href="../profile/?report&markread='.$row['id'].'"><span class="badge badge-red">Mark Read</span></a>' : '<span class="badge badge-green">Solved</span>').'</td>
            </tr>';
            $count++;

	}
	return $query->rowCount();
}

function mark_report_read($id){
	global $dbh;
	$q = 'UPDATE user_reports SET status = 1 WHERE id = :id' ;
	$query = $dbh->prepare($q);
	$status = $query->execute(array(':id'=>$id));
}

function send_message($to, $message){
	global $dbh;
	$q = "INSERT INTO messages (username, message) VALUES (:username, :message)";
	$query = $dbh->prepare($q);
	$status = $query->execute(array(':username'=>$to, ':message'=>$message));


	if ($status) {
		return true;
	}else{
		return false;
	}
}

function remove_url_variable($url, $variable){
	return preg_replace('/([?&])'.$variable.'=[^&]+(&|$)/', '$1', $url);
}

#############################################################################################################################
################################################ START VERTI TREE FUNCTION #############################################################
#############################################################################################################################

function generate_tree_list($array, $parent, $level = 0){
  $has_children = false;
  foreach($array as $key => $value){
  	$placement_under = explode(' - ', $value['placement_under'])[0];
  	$placement_side = explode(' - ', $value['placement_under'])[1];
    if ($placement_under == $parent){
      if ($has_children === false){
        $has_children = true;
        echo '<ol class="dd-list">';
        $level++;
      }
      echo '<li data-id="'.$value['username'].'" class="dd-item dd3-item">
	            <div class="dd-handle dd3-handle"></div>
	            <div class="dd3-content"><b>'.$placement_side.'</b> - '.$value['username'].' @ '.$value['sponsor'].'<br>( '.$value['name'].' )</div>';
      generate_tree_list($array, $key, $level);
      echo '</li>';
    }

  }
  if ($has_children === true) echo '</ol>';
}

function print_user_chain_tree($username){ // total members chain tree below the particular members
	$categories = count_user_chain($username);

	generate_tree_list($categories, $username);
}

#############################################################################################################################
########################################## END VERTI TREE FUNCTION ########################################################
#############################################################################################################################

#############################################################################################################################
################################################ START HORIZONTAL TREE FUNCTION #############################################
#############################################################################################################################

function generate_hori_tree_list($username){
   $chain = count_user_chain($username);
   echo " <script language=javascript>
	            mytree = new dTree('mytree');
	            mytree.add('".$username."', -1, '".$username."', '', '( ".$username." )', '', '');";
	foreach ($chain as $value) {
		$placement_under = explode(' - ', $value['placement_under'])[0];
		$placement_side = explode(' - ', $value['placement_under'])[1];
		$id = $value['username'];
		   echo "mytree.add('".$id."', '".$placement_under."', '".$placement_side."<br>".$id."<br>( ".$value['name']." ) ', '#', 'Sponsor - ".$value['sponsor']."', '', '');
		   	";
	}




		    echo "document.write(mytree);
		  </script>";
}

#############################################################################################################################
########################################## END VERTI TREE FUNCTION ########################################################
#############################################################################################################################




################################## TEST FUNCTIONS ################################## must be placed at bottom with same order
#############################################################################################################################

function send_report($username, $contact, $report){
	global $dbh;
	$user = fetch_user_details($username);
	$contact = $user['contact'].', '.$contact;
	$q = "INSERT INTO user_reports (username, name, contact, report) VALUES (:username, :name, :contact, :report)";
	$query = $dbh->prepare($q);
	$status = $query->execute(array(':username'=>$username, ':name'=>$user['name'], ':contact'=>$contact, ':report'=>$report));
	if ($status) {
		return check_last_entry($username, 'user_reports', 'id', 'id');
	}else{
		return false;
	}
}

function generate_wallet_keyss($howMany){
	global $dbh;
	$chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
	$keyss = '';
	$count = 1;
	$amount = $howMany * 200 ;
	if (transaction($_SESSION['sess_username'], "- $amount", "Debit -Generated $howMany Keys from Wallet")) {
		while ($count <= $howMany){
			$keyss = '';
			for ($i=0; $i < 10; $i++) {
				$keyss .= $chars[rand(0,strlen($chars)-1)];
			}
			$q = "INSERT INTO keyss (keyss, created_by, creator_role) VALUES (:keyss, :created_by, :creator_role)";
			$query = $dbh->prepare($q);
			$status = $query->execute(array(':keyss'=>$keyss, ':created_by'=>$_SESSION['sess_username'], ':creator_role'=>$_SESSION['sess_userrole']));
			if($status) $count++;
		}
		if ($status) {

			return true;
		}else{
			return false;
		}
	}
}

function promotion_eligibility($username){  // total no. of juniors on level below th username
	global $dbh;
	$userlevel = check_level($username);
	if ($userlevel) {
		$q = "SELECT userlevel FROM users WHERE sponsor = :username AND userlevel >= :userlevel";
		$query = $dbh->prepare($q);
		$query->execute(array(':username'=>$username, ':userlevel'=>$userlevel));
		if ($query->rowCount() === 4 ) {
		 	return true;
		}
		return false;
	}else{
		if (count_user_members($username) === 6 ) {
		 	return true;
		}
		return false;
	}
}


function auto_level_up($user, $newRegistration){  /// it must be on last of all functions   ############ TEST ######
	$seniors = get_seniors($user);
	foreach ($seniors as $username) {
		if (!$username) {
			return;
		}
		switch (check_level($username)) {
			case 0:
					if (promotion_eligibility($username)) {
						level_up($username);
						transaction($username, '+ 500', 'Credit - Level 1 Completion Bonus');
						send_message($username, "You have Got 500 wallet Amount for clearing Level 1");
					}
					break;

			case 1:
					if (promotion_eligibility($username)) {
						level_up($username);
						transaction($username, '+ 1000', 'Credit - Level 2 Completion Bonus');
						send_message($username, "You have Got 1000 wallet Amount for clearing Level 2");
					}
					break;

			case 2:
					if (promotion_eligibility($username)) {
						level_up($username);
						transaction($username, '+ 2000', 'Credit - Level 3 Completion Bonus');
						send_message($username, "You have Got 2000 wallet Amount for clearing Level 3");
						bar_user($username, 3);
						send_message($username, "Nok Nok ! You need To Upgrade you account by 300 wallet amount to get all benefits of next levels");
					}
					break;

			case 3:
					if (promotion_eligibility($username)) {
						level_up($username);
						transaction($username, '+ 4000', 'Credit - Level 4 Completion Bonus');
						send_message($username, "You have Got 4000 wallet Amount for clearing Level 4");
					}
					break;

			case 4:
					if (promotion_eligibility($username)) {
						level_up($username);
						transaction($username, '+ 8000', 'Credit - Level 5 Completion Bonus');
						send_message($username, "You have Got 8000 wallet Amount for clearing Level 5");
						bar_user($username, 5);
						send_message($username, "Nok Nok ! You need To Upgrade you account by 1000 wallet amount to get all benefits of next levels");
					}
					break;

			case 5:
					if (promotion_eligibility($username)) {
						level_up($username);
						transaction($username, '+ 16000', 'Credit - Level 6 Completion Bonus');
						send_message($username, "You have Got 16000 wallet Amount for clearing Level 6");

					}
					break;

			case 6:
					if (promotion_eligibility($username)) {
						level_up($username);
						transaction($username, '+ 32000', 'Credit - Level 7 Completion Bonus');
						send_message($username, "You have Got 32000 wallet Amount for clearing Level 7");
						bar_user($username, 7);
						send_message($username, "Nok Nok ! You need To Upgrade you account by 2000 wallet amount to get all benefits of next levels");
					}
					break;

			case 7:
					if (promotion_eligibility($username)) {
						level_up($username);
						transaction($username, '+ 64000', 'Credit - Level 8 Completion Bonus');
						send_message($username, "You have Got 64000 wallet Amount for clearing Level 8");
					}
					break;

			case 8:
					if (promotion_eligibility($username)) {
						level_up($username);
						transaction($username, '+ 128000', 'Credit - Level 9 Completion Bonus');
						send_message($username, "You have Got 128000 wallet Amount for clearing Level 9");
						bar_user($username, 9);
						send_message($username, "Nok Nok ! You need To Upgrade you account by 5000 wallet amount to get further commissions.");
					}
					break;

			default:
					break;
		}
	}
}

function auto_payment($placement_under, $newRegistration){  /// it must be on last of all functions   ############ TEST #############
	$head = get_placement_heads($placement_under);
	$commission = 75;
	foreach ($head as $username) {
		$username = explode(' - ', $username)[0];
		if (!$username) {
			return;
		}
		if (check_user_status($username) == 1) {
			transaction($username, '+ '.$commission, "Credit- Joining Bonus ($newRegistration)");
		}
		$commission -= 25;
	}
}
?>